/**
 * Internal dependencies
 */
import { registerFieldType } from 'field';
import defaultFields from 'field/default-fields';
import createStore from 'state/store';

import PostTypeController from 'controller/post-type.js';

/**
 * Handles the top-level API of Ultimate Fields.
 */
export default class UltimateFields {
	store = null;
	controllers = {};

	/**
	 * Initializes the store and plugin upon request.
	 * (when the first container should be initialized)
	 */
	initialize() {
		if ( null !== this.store ) {
			return;
		}

		/**
		 * Prepare the available controllers.
		 */
		this.availableControllers = {
			postType: PostTypeController,
		};

		/**
		 * Register the default field types.
		 */
		defaultFields.forEach( type => {
			type( registerFieldType )
		} );

		/**
		 * Ultimate Fields uses a global store that will be shared amongst
		 * containers to allow for compicated top-level dependencies.
		 */
		this.store = createStore();
	}

	/**
	 * Generates the controller for a particular type.
	 *
	 * @param  {string} type The type of controller needed.
	 * @param  {Object} args Optional arguments for the controllers' constructor.
	 * @return {Controller}  The (new) controller.
	 */
	getController( type, args ) {
		if ( this.controllers.hasOwnProperty( type ) ) {
			return this.controllers[ type ];
		}

		const Controller = this.availableControllers[ type ];
		this.controllers[ type ] = new Controller( args, this.store );

		return this.controllers[ type ];
	}

	/**
	 * Initializes a container within a specific DOM element.
	 * This method works with the specific structure, generated by PHP.
	 *
	 * @param {string} id         The ID of the element.
	 * @param {string} controller The controller to use.
	 */
	initializeDOMContainer( id, type, args ) {
		console.time( 'container-' + id );

		// Start the API if necessary
		this.initialize();

		// Assign elements and parse settings
		const wrapper  = document.getElementById( id );
		const input    = wrapper.nextElementSibling;
		const settings = JSON.parse( wrapper.children[ 0 ].innerHTML );
		const data     = JSON.parse( input.value );

		// Locate the controller and generate an instance
		const controller = this.getController( type, args );
		const instance = controller.startInstance( wrapper, settings, data );
		instance.assignInput( input );

		console.timeEnd( 'container-' + id );
	}
}
