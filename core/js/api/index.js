/**
 * External dependencies
 */
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';

/**
 * Internal dependencies
 */
import { initializeStore, extractDataFromState } from 'container';
import Container from 'container/component';
import { registerFieldType } from 'field';
import defaultFields from 'field/default-fields';
import createStore from 'state/store';

const tempStoreName = 'options';

/**
 * Handles the top-level API of Ultimate Fields.
 */
export default class UltimateFields {
	store = null;

	/**
	 * Initializes the store and plugin upon request.
	 * (when the first container should be initialized)
	 */
	initialize() {
		if ( null !== this.store ) {
			return;
		}

		/**
		 * Register the default field types.
		 */
		defaultFields.forEach( type => {
			type( registerFieldType )
		} );

		/**
		 * Ultimate Fields uses a global store that will be shared amongst
		 * containers to allow for compicated top-level dependencies.
		 */
		this.store = createStore();
	}

	/**
	 * Starts a container within a specific DOM node.
	 *
	 * @param  {HTMLElement} node     The node where the container should appear.
	 * @param  {Object}      settings The settings of the container.
	 * @param  {Object}      data     The initial data for the container.
	 * @param  {Function}    callback A callback that will be executed when the store changes.
	 */
	initializeContainer( node, settings, data, callback ) {
		const { fields } = settings;

		// Start the API if necessary
		this.initialize();

		// Prepare a container ID
		const id = `${tempStoreName}-${settings.id}`;

		// Initialize the store with the container's data
		initializeStore( {
			store: this.store,
			container: id,
			dataPath: [ tempStoreName ],
			fields,
			data,
		} );

		// Subscribe for changes
		this.store.subscribe( () => {
			callback( extractDataFromState( this.store.getState(), tempStoreName, fields ) );
		} );

		// Render the container in place
		ReactDOM.render(
			<Provider store={ this.store }>
				<Container
					container={ id }
					dataPath={ [ tempStoreName ] }
					{ ...settings }
				/>
			</Provider>,
			node
		);
	}

	/**
	 * Initializes a container within a specific DOM element.
	 * This method works with the specific structure, generated by PHP.
	 *
	 * @param {string} id The ID of the element.
	 */
	initializeDOMContainer( id ) {
		const wrapper  = document.getElementById( id );
		const input    = wrapper.nextElementSibling;

		const settings = JSON.parse( wrapper.children[ 0 ].innerHTML );
		const data     = JSON.parse( input.value );

		this.initializeContainer( wrapper, settings, data, updatedData => {
			input.value = JSON.stringify( updatedData );
		} );
	}
}
