import React from 'react';
import ReactDOM from 'react-dom';
import Loader from './../PHP/Loader.jsx';

export default class Controller extends React.Component {
	static controllers = {}
	static initialized = {}
	locations = []

	getLocationClass() {
		throw 'All controllers must specify a location class through their getLocationClass method.';
	}

	init({ element, settings: rawSettings, data }) {
		const FormClass = this.getLocationClass();

		const ref = form => {
			// Save the form element for validation & etc. later
			this.locationDidMount( form, element );
		}

		const settings = Object.assign( {}, rawSettings, {
			fields: ( new Loader( rawSettings.fields ) ).load()
		})

		ReactDOM.render(
			<FormClass settings={ settings } data={ data } ref={ ref } />,
			element
		);
	}

	/**
	 * Saves the location object locally once it has been mounted.
	 *
	 * @param {React.Element> form The form that has just been mounted.
	 * @param {HTMLElement}   root The root element for the location.
	 */
	locationDidMount( form, root ) {
		this.locations.push( form );
	}

	/**
	 * Checks if the submission of the #post form should be prevented because of validation.
	 *
	 * @param {Event} e The event that just happened.
	 */
	onSubmit( e ) {
		// Collect all errors
		const reducer = ( errors, location ) => errors.concat( location.validate() )
		const errors  = this.locations.reduce( reducer, [] )

		if( errors.length ) {

			// Display the errors and prevent the submission if any
			e.preventDefault();
			this.displayErrors( errors );

		} else {

			// Clear existing errors in order not to confuse the user while waiting
			this.clearErrors();

		}
	}

	/**
	 * Generates a WordPress error notice.
	 *
	 * @param {Array.string} errors All errors, generated by top-level fields.
	 * @return {React.Element}
	 */
	generateErrorNotice( errors ) {
		return <div className="error uf-error">
			<p><strong>{ uf_l10n['container-issues'] }</strong></p>

			<ul>
				{ errors.map( ( error, i ) =>
					<li key={ i } children={ error } />
				) }
			</ul>
		</div>;
	}

	/**
	 * Clears all errors, which have already been displayed.
	 */
	clearErrors() {
		const wrap = document.querySelector( '.uf-errors' );

		if( ! wrap ) {
			return;
		}

		ReactDOM.unmountComponentAtNode( wrap );
		wrap.parentNode.removeChild( wrap );
	}
}
