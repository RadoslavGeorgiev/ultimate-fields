import React from 'react';
import ReactDOM from 'react-dom';
import Controller from './Controller.jsx';
import PostTypeLocation from './../Location/Post_Type.jsx';

/**
 * Handles the editing screens of post types.
 */
export default class Post_Type extends Controller {
	env = {}

	getLocationClass() {
		return PostTypeLocation;
	}

	/**
	 * Additional to standard controller contructor, adds a listneer to the post form.
	 */
	constructor() {
		super();

		// Add environment (rule) listeners and collect the initial state
		this.initializeEnvironment();

		// Add a submission handler for validation purposes
		document.getElementById( 'post' ).addEventListener( 'submit', this.onSubmit.bind( this ) );
	}

	/**
	 * Saves the location object locally once it has been mounted.
	 *
	 * @param {React.Element> form The form that has just been mounted.
	 * @param {HTMLElement}   root The root element for the location.
	 */
	locationDidMount( form, root ) {
		Controller.prototype.locationDidMount.apply( this, arguments );

		form.associateWithBox( root );
		form.setEnvironment( this.env );
	}

	/**
	 * Displays all errors as a notice in the beginning of the page.
	 *
	 * @param {Array.string} errors All errors, generated by top-level fields.
	 */
	displayErrors( errors ) {
		const notice = this.generateErrorNotice( errors );

		// Cleanup all success messages and existing UF errors.
		const existing = document.querySelectorAll( '.notice-success, .uf-error' );
		Array.from( existing ).forEach( message => message.parentNode.removeChild( message ) );

		// Create React root element in order to allow rendering
		const wrap = document.createElement( 'div' );
		wrap.classList.add( 'uf-errors' );

		// Put the root element in the right place
		const slugBox = document.getElementById( 'edit-slug-box' );
		const after = slugBox || document.getElementById( 'titlediv' );
		after.parentNode.insertBefore( wrap, after.nextSibling );

		ReactDOM.render(
			notice,
			wrap
		);
	}

	/**
	 * Adds all necessary listners and loads the initial environment.
	 */
	initializeEnvironment() {
		const update = this.updateEnvironment.bind( this );

		const listen = ( selector, eventName ) => {
			const elements = Array.from( document.querySelectorAll( selector ) );

			elements.forEach( el => {
				el.addEventListener( eventName, update );
			});
		}

		listen( '#page_template', 'change' );
		listen( '#post-formats-select input', 'change' );
		listen( '#post_status', 'change' );
		listen( '#parent_id', 'change' );
		listen( '.categorychecklist input', 'change' );

		this.updateEnvironment();
	}

	/**
	 * Updates all environmental vars.
	 */
	updateEnvironment() {
		this.collectEnvironment();
		this.locations.forEach( location => location.setEnvironment( this.env ) );
	}

	/**
	 * Collects all environmental vars.
	 */
	collectEnvironment() {
		this.env = Object.assign( {}, this.env );

		// Small shortcut
		const all = ( selector, callback, container ) => {
			if( ! container ) container = document;
			Array.from( container.querySelectorAll( selector ) ).forEach( callback );
		}

		// Check templates
		all( '#page_template', select => {
			this.env.template = select.value;
		});

		// Check formats
		all( '#post-formats-select input', input => {
			if( 'radio' == input.type && input.checked ) {
				this.env.format = input.value;
			}
		});

		// Check the status of the post
		all( '#post_status', select => {
			this.env.status = select.value;
		});

		// Check for a post parent
		all( '#parent_id', select => {
			Array.from( select.children ).forEach( option => {
				if( option.value !== select.value ) return;

				const stringLevel = option.className.replace('level-', '');
				if( stringLevel.match( /^\d+$/ ) ) {
					this.env.level = parseInt( stringLevel ) + 2;
				} else {
					this.env.level = 1;
				}
			});

			this.env.parent = select.value ? parseInt( select.value ) : false;
		});

		all( '.categorychecklist', list => {
			if( list.id.match( /-pop$/ ) ) {
				return;
			}

			const tax   = list.dataset.wpLists.replace( /^list:/, '' );
			const terms = [];

			all( 'input', input => {
				if( input.checked ) {
					terms.push( parseInt( input.value ) );
				}
			}, list );

			this.env[ 'tax_' + tax ] = terms;
		});
	}
}
